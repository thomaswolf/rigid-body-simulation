// Based on: http://learnopengl.com/#!Advanced-Lighting/Shadows/Shadow-Mapping

#version 330 core

in vec3 VertexColor;
in vec3 VertexNormal;
in vec3 FragPos;
in vec4 FragPosLightSpace;

out vec4 color;

uniform sampler2D shadowMap;

uniform vec3 lightPos;
uniform vec3 lightColor;
uniform vec3 viewPos; 

float CalcShadow(float bias)
{
	// restore homogenous coordinates
    vec3 projCoords = FragPosLightSpace.xyz / FragPosLightSpace.w;	
	projCoords = projCoords * 0.5 + 0.5;  // transform to [0,1] range

	//float closestDepth = texture(shadowMap, projCoords.xy).r; // depth from light at fragment coordinate
	float currentDepth = projCoords.z; // fragment depth projected in light space

	//float shadow = currentDepth - bias> closestDepth ? 1.0 : 0.0;

	float shadow = 0.0;
	vec2 texelSize = 1.0 / textureSize(shadowMap, 0);
	for(int x = -1; x <= 1; ++x)
	{
		for(int y = -1; y <= 1; ++y)
		{
			float pcfDepth = texture(shadowMap, projCoords.xy + vec2(x, y) * texelSize).r; 
			shadow += currentDepth - bias > pcfDepth ? 1.0 : 0.0;        
		}    
	}
	shadow /= 9.0;

	if (projCoords.z > 1.0) // projection outside light frustum
		shadow = 0;

	return shadow;
}


void main()
{
	// ambient color
	float ambientStrength = 0.25f;
	vec3 ambient = ambientStrength * lightColor;

	// diffuse color
	vec3 norm = normalize(VertexNormal);
	vec3 lightDir = normalize(lightPos - FragPos); // vec from fragment to light source
	float diff = max(dot(norm,lightDir), 0.0); // determines how parallel the light is compared to the normal vector
	vec3 diffuse = diff * lightColor;

	// specular color
	vec3 viewDir = normalize(viewPos - FragPos);
	vec3 reflectDir = reflect(-lightDir, norm); // calculates reflected light direction
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), 4); // increase if reflection is parallel to viewDir
	vec3 specular = spec*lightColor;

	
	//float bias = max(0.002 * (1.0 - dot(norm, lightDir)), 0.0005);  
	float bias = 0.005 * tan(acos( clamp (dot(norm, lightDir), 0, 1)));
	float shadow = CalcShadow(bias);
	shadow = min(shadow, 0.8);

	vec3 brightness = (ambient + 1.0 - shadow) * (ambient + specular + diffuse);
	color = vec4(brightness * VertexColor, 1.0f);
}

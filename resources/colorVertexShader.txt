#version 330 core
layout (location = 0) in vec3 position;
layout (location = 1) in vec3 normal;
layout (location = 2) in vec3 color;
layout (location = 3) in vec2 texCoords;
layout (location = 4) in mat4 instanceMatrix;

out vec2 TexCoords;
out vec3 VertexColor;
out vec3 VertexNormal;
out vec3 FragPos;
out vec4 FragPosLightSpace;

//uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;
uniform mat4 lightSpaceMatrix;

void main()
{
    gl_Position = projection * view * instanceMatrix * vec4(position, 1.0f);

    TexCoords = texCoords;
    VertexColor = color;
	FragPos = vec3(instanceMatrix * vec4(position, 1.0f)); // vertex in world space
	//VertexNormal = mat3(transpose(inverse(instanceMatrix))) * normal;   // corrects scaling
	VertexNormal = mat3(transpose(inverse(instanceMatrix))) * normal;   // corrects scaling

	FragPosLightSpace = lightSpaceMatrix * vec4(FragPos, 1.0); // vertex in light space
}
